{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"fs-extra\"","webpack:///./src/utilities.js","webpack:///external \"@babel/polyfill\"","webpack:///./src/index.js","webpack:///./src/generator.js","webpack:///external \"react\"","webpack:///external \"ink\"","webpack:///external \"ink-text-input\"","webpack:///external \"ink-select-input\"","webpack:///external \"clipboardy\"","webpack:///./src/lingo.js","webpack:///external \"Lingojs\"","webpack:///external \"dotenv\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","configName","arguments","length","undefined","kitNames","kits","map","sections","headers","console","log","_generator","_lingo","_utilities","_ink","render","_react","createElement","LAFGenerator","_interopRequireDefault","_inkTextInput","_inkSelectInput","_fsExtra","_clipboardy","_this","_classCallCheck","this","_getPrototypeOf","state","error","errorInfo","phase","env","spaceId","apiToken","outputLoc","config","quantity","tempKitName","handleIntro","_assertThisInitialized","handleEnvOutput","handleEnvApiToken","handleEnvSpaceId","handleConfigKitQuantity","handleConfigKitName","React","Component","setState","selection","setNestedStateEnv","setNestedStateConfig","_this$state","concat","_toConsumableArray","Array","from","_ref2","_objectSpread","kv","keys","_ref3","_defineProperty","_ref4","Box","Text","items","label","onSelect","_this$state$config","JSON","stringify","uGenerateLAFBoilerplate","values","fs","outputFile","process","cwd","err","clipboardy","writeSync","_this2","onChange","onSubmit","updatePhase","placeholder","functionName","Color","blue","red","_this3","rootDir","cError","_this4","_this5","cOutputMethodSelector","parent","nextPhase","_this6","handleConfigOutput","_this7","handleConfigKitNameSubmit","cIntro","cEmptyBoilerplate","cEnvSpaceId","_this$state2","_this$state2$env","cEnvApiToken","cEnvOutputMethod","data","cConfigKitQuantity","_this$state3","cConfigKitName","cConfigOutputMethod","includes","renderIntro","renderEnv","renderConfig","cEnd","_Lingojs","getLingoSetupVariables","SPACE_ID","API_TOKEN","getKitId","_callee","kitName","kitUuid","_args","regeneratorRuntime","wrap","_context","prev","next","lingo","fetchKits","sent","forEach","v","kit_uuid","abrupt","t0","stop","getRelevantAssetContainer","_callee2","kitId","extractTarget","kitVersion","outline","assetContainer","_args2","_context2","fetchKitOutline","extract","xIdx","filter","origin","matchingOrigin","uuid","assign","slimmedOrigin","sectionUuid","extractHeaderName","xHeader","flat","oHeader","idx","matchedOriginHeaders","_matchedOriginHeaders","matchedUuidHeaderKV","extracted","x","buildFileName","assetName","assetKeywords","underscoredKeywords","split","tag","trim","trimmed","replace","join","getAssetUuids","_callee3","container","version","page","limit","assetUuids","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_i","_Object$entries","_Object$entries$_i","header","headerUuid","section","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","item","fileName","headerAssets","_i2","_Object$entries2","_Object$entries2$_i","_args3","_context3","iterator","done","entries","_slicedToArray","fetchSection","asset_uuid","asset","keywords","push","finish","fetchAssetsForHeading","t1","t2","batchDownload","_callee5","outFormat","outDir","_args5","_context5","_ref","_asyncToGenerator","mark","_callee4","a","buffer","_context4","downloadAsset","toUpperCase","outputFileSync","toLowerCase","_x5","apply","_callee6","outputDirectory","outputFormat","lsConfig","_args6","_context6","Error","setup","t3","t4","t5","t6","t7","t8","t9","t10"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require(\"fs-extra\");","const log = console.log;\n//TODO: Create uGenerateEnvBoilerplate\n//TODO: Update emptyBoilerplate & interactiveBoilerplate with new Env generator\nexport function uGenerateLAFBoilerplate(configName = \".laf.json\", kitNames) {\n  if (kitNames.length > 0) {\n    let kits = kitNames.map(name => {\n      return {\n        name,\n        sections: [\n          {\n            name: \"\",\n            headers: [\"\"]\n          }\n        ]\n      };\n    });\n    return {\n      name: configName,\n      value: {\n        kits\n      }\n    };\n  } else {\n    return {\n      name: configName,\n      kits: [\n        {\n          name: \"\",\n          sections: [\n            {\n              name: \"\",\n              headers: [\"\"]\n            }\n          ]\n        }\n      ]\n    };\n  }\n}\n","module.exports = require(\"@babel/polyfill\");","export { LAFGenerator, initInk } from \"./generator\";\nexport {\n  getRelevantAssetContainers,\n  getKitId,\n  getLingoSetupVariables,\n  getAssetUuids,\n  formatAssetContainers,\n  batchDownload,\n  init\n} from \"./lingo\";\nexport { uGenerateLAFBoilerplate } from \"./utilities\";\n","import React from \"react\";\nimport { render, Box, Text, Color } from \"ink\";\nimport TextInput from \"ink-text-input\";\nimport SelectInput from \"ink-select-input\";\nimport fs from \"fs-extra\";\nimport clipboardy from \"clipboardy\";\nimport { uGenerateLAFBoilerplate } from \"./utilities\";\nconst log = console.log;\n\n/*\n  * Text Input: \n  1. Lingo Space ID: 000000\n  2. API Key: token\n\n  * Text Input: \n  1. How many kits? 2\n  2. Name of kit: Foobar\n  3. Name of kit: Foobar\n*/\n\n//TODO: Add a check if laf.json already exists to prevent overwriting\n//TODO: Update expor\nexport class LAFGenerator extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      error: \"\",\n      errorInfo: \"\",\n      phase: \"\",\n      env: {\n        spaceId: \"\",\n        apiToken: \"\",\n        outputLoc: \"\"\n      },\n      config: {\n        quantity: \"\",\n        tempKitName: \"\",\n        kits: [],\n        outputLoc: \"\"\n      }\n    };\n\n    /*\n     ***********************************************\n     *\tBinding\n     ************************************************\n     */\n    // * SelectInput\n    this.handleIntro = this.handleIntro.bind(this);\n    this.handleEnvOutput = this.handleEnvOutput.bind(this);\n    // * TextInput\n    this.handleEnvApiToken = this.handleEnvApiToken.bind(this);\n    this.handleEnvSpaceId = this.handleEnvSpaceId.bind(this);\n    this.handleConfigKitQuantity = this.handleConfigKitQuantity.bind(this);\n    this.handleConfigKitName = this.handleConfigKitName.bind(this);\n  }\n  /*\n   ***********************************************\n   *\tUpdate Phase\n   ************************************************\n   */\n  updatePhase(phase) {\n    this.setState({ phase });\n  }\n\n  /*\n   ***********************************************\n   *\tHandlers\n   ************************************************\n   */\n\n  handleIntro({ value: phase } = selection) {\n    //? Param syntax look weird? See here: https://codeburst.io/renaming-destructured-variables-in-es6-807549754972\n    this.setState({ phase });\n  }\n  handleEnvOutput(outputLoc) {\n    this.setNestedStateEnv({ outputLoc });\n  }\n  handleConfigOutput(outputLoc) {\n    this.setNestedStateConfig({ outputLoc });\n  }\n  handleEnvApiToken(apiToken) {\n    this.setNestedStateEnv({ apiToken });\n  }\n  handleEnvSpaceId(spaceId) {\n    this.setNestedStateEnv({ spaceId });\n  }\n  handleConfigKitQuantity(quantity) {\n    this.setNestedStateConfig({ quantity });\n  }\n  handleConfigKitName(name) {\n    this.setNestedStateConfig({ tempKitName: name });\n  }\n  //TODO: Fix the infinite loop for kit names\n  handleConfigKitNameSubmit() {\n    const {\n      config,\n      config: { tempKitName: name }\n    } = this.state;\n    if (name.length > 0) {\n      const kits = [...Array.from(config.kits), { name }];\n      this.setState(({ config }) => {\n        return {\n          config: {\n            ...config,\n            kits,\n            tempKitName: \"\"\n          }\n        };\n      });\n    }\n  }\n  /*\n  ***********************************************\n  *\tsetNestedState Factories\n  ************************************************\n  ? since event object is not available, what's the best way to create a generic handler?\n  ? (ie. can't do e.target.name/value trick)\n  */\n\n  setNestedStateEnv(kv) {\n    let key = Object.keys(kv);\n    this.setState(({ env }) => ({\n      env: {\n        ...env,\n        [key]: kv[key]\n      }\n    }));\n  }\n  setNestedStateConfig(kv) {\n    let key = Object.keys(kv);\n    this.setState(({ config }) => ({\n      config: {\n        ...config,\n        [key]: kv[key]\n      }\n    }));\n  }\n  /*\n   ***********************************************\n   *\tEvent Lifecycle\n   ************************************************\n   */\n  // componentDidUpdate() {\n  // \tlog(`this.state: ${JSON.stringify(this.state, null, 2)}`);\n  // }\n  componentDidCatch(error, errorInfo) {\n    this.setState({ error, errorInfo });\n  }\n\n  /*\n   ***********************************************\n   * Components\n   ************************************************\n   */\n  cIntro() {\n    //TODO: Add exit as third option\n    const wydItems = [\n      {\n        label: \"Generate empty boilerplate\",\n        value: \"emptyBoilerplate\"\n      },\n      {\n        label: \"Generate boilerplate interactively\",\n        value: \"interactiveBoilerplate\"\n      }\n    ];\n    return (\n      <Box>\n        <Text>What would you like to do?</Text>\n        <SelectInput items={wydItems} onSelect={this.handleIntro} />\n      </Box>\n    );\n  }\n  //TODO: Refactor cEnd to \"cConfigEnd\"\n  cEnd() {\n    const {\n      config: { outputLoc, kits }\n    } = this.state;\n    //TODO: Abstract below into utility function for cEnd and cEnvDone's inline function\n    //TODO: Add a check to see whether clipboard is already filled. If so, forego this option and write to laf.json\n    let config = JSON.stringify(\n      uGenerateLAFBoilerplate(\".laf.json\", Object.values(kits)),\n      null,\n      2\n    );\n    if (outputLoc == \"dotLAF\") {\n      fs.outputFile(`${process.cwd()}/.laf.json`, config, err => {\n        if (err) throw err;\n      });\n    } else if (outputLoc == \"clipboardConfig\") {\n      clipboardy.writeSync(config);\n    }\n    //TODO: Replace state object with helpful text / status update\n    return (\n      <Box>\n        <Text>state: ${JSON.stringify(this.state, null, 2)}</Text>\n      </Box>\n    );\n  }\n  //TODO: Validate config.quantity. Must be int\n  cConfigKitQuantity() {\n    return (\n      <Box>\n        <Text>How many kits would you like to download assets from?</Text>\n        &nbsp;\n        <TextInput\n          value={this.state.config.quantity}\n          onChange={this.handleConfigKitQuantity}\n          onSubmit={() => {\n            this.updatePhase(\"configKitName\");\n          }}\n          placeholder=\"#\"\n        />\n      </Box>\n    );\n  }\n  cError(functionName, err) {\n    return (\n      <Box>\n        <Color blue>{functionName}(): </Color>\n        <Color red>Error: {err}</Color>\n      </Box>\n    );\n  }\n  cEmptyBoilerplate(kitNames = [\"\"]) {\n    let rootDir = process.cwd();\n    let env = { name: \".env\", value: `SPACE_ID=''\\nAPI_TOKEN=''` };\n    let config = uGenerateLAFBoilerplate(\".laf.json\", kitNames);\n    //TODO: Any reason I should not remove rootDir and replace it with cwd?\n    fs.outputFile(`${rootDir}/${env.name}`, env.value, err => {\n      if (err) return this.cError(\"cEmptyBoilerplate\", err);\n    });\n    fs.outputFile(\n      `${rootDir}/${config.name}`,\n      JSON.stringify(config.value, null, 2),\n      err => {\n        if (err) return this.cError(\"cEmptyBoilerplate\", err);\n      }\n    );\n    return (\n      <Box>\n        <Text>\n          <Color blue>{config.name}</Color> & <Color blue>{env.name}</Color> has\n          been generated.\n        </Text>\n      </Box>\n    );\n  }\n  //TODO: Add check after config is generated to output to clipboard or file\n  cEnvSpaceId() {\n    return (\n      <Box>\n        <Text>What's your Lingo Space ID?</Text>&nbsp;\n        <TextInput\n          value={this.state.env.spaceId}\n          onChange={this.handleEnvSpaceId}\n          onSubmit={() => this.updatePhase(\"envApiToken\")}\n          placeholder=\"000000\"\n        />\n      </Box>\n    );\n  }\n  cEnvApiToken() {\n    return (\n      <Box>\n        <Text>What's your Lingo API Token?</Text>&nbsp;\n        <TextInput\n          value={this.state.env.apiToken}\n          onChange={this.handleEnvApiToken}\n          onSubmit={() => this.updatePhase(\"envOutputMethod\")}\n          placeholder=\"token\"\n        />\n      </Box>\n    );\n  }\n  //TODO: Abstract handleEnvOutput method\n  cConfigOutputMethod() {\n    let configOutputItems = [\n      {\n        label: \"Write to ./.laf.json\",\n        value: \"dotLAF\"\n      },\n      {\n        label: \"Write to clipboard\",\n        value: \"clipboardConfig\"\n      }\n    ];\n    return this.cOutputMethodSelector(configOutputItems, \"config\", \"end\");\n  }\n  cEnvOutputMethod() {\n    let envOutputItems = [\n      {\n        label: \"Write to ./.env\",\n        value: \"dotEnv\"\n      },\n      {\n        label: \"Write to clipboard\",\n        value: \"clipboard\"\n      }\n    ];\n    return this.cOutputMethodSelector(\n      envOutputItems,\n      \"env\",\n      \"configKitQuantity\"\n    );\n  }\n  cOutputMethodSelector(items, parent, nextPhase) {\n    return (\n      <Box>\n        <Text>{`Where would you like to output this data?\\n`}</Text>\n        <SelectInput\n          items={items}\n          onSelect={({ value } = outputLoc) => {\n            parent === \"env\"\n              ? this.handleEnvOutput(value)\n              : this.handleConfigOutput(value);\n            this.updatePhase(nextPhase);\n          }}\n        />\n      </Box>\n    );\n  }\n  cConfigKitName() {\n    return (\n      <Box>\n        <Text>What's the name of your kit's config?</Text>\n        &nbsp;\n        <TextInput\n          value={this.state.config.tempKitName}\n          onChange={this.handleConfigKitName}\n          onSubmit={() => {\n            this.handleConfigKitNameSubmit();\n          }}\n        />\n      </Box>\n    );\n  }\n  /*\n   ***********************************************\n   * Utilities\n   ************************************************\n   */\n\n  /*\n   ***********************************************\n   * Conditional Rendering (phase checkers)\n   ************************************************\n   */\n  renderIntro() {\n    if (this.state.phase == \"\") {\n      return this.cIntro();\n    }\n    if (this.state.phase == \"emptyBoilerplate\") {\n      return this.cEmptyBoilerplate();\n    } else if (this.state.phase == \"interactiveBoilerplate\") {\n      return this.cEnvSpaceId();\n    }\n  }\n  renderEnv() {\n    const {\n      phase,\n      env: { outputLoc, spaceId, apiToken }\n    } = this.state;\n    switch (phase) {\n      case \"envSpaceId\":\n        return this.cEnvSpaceId();\n      case \"envApiToken\":\n        return this.cEnvApiToken();\n      case \"envOutputMethod\":\n        return this.cEnvOutputMethod();\n      case \"envDone\":\n        let data = `SPACE_ID='${spaceId}'\\nAPI_TOKEN='${apiToken}'`;\n        if (outputLoc == \"dotEnv\") {\n          fs.outputFile(`${process.cwd()}/.env`, data, err => {\n            if (err) throw err;\n          });\n        } else if (outputLoc == \"clipboard\") {\n          clipboardy.writeSync(data);\n        }\n        return this.cConfigKitQuantity();\n      default:\n        return (\n          <Box>\n            <Text>\n              Nothing found in <Color blue>renderEnv()</Color>\n            </Text>\n          </Box>\n        );\n    }\n  }\n  renderConfig() {\n    const { phase, config } = this.state;\n    switch (phase) {\n      case \"configKitQuantity\":\n        return this.cConfigKitQuantity();\n      case \"configKitName\":\n        if (config.kits.length < config.quantity) {\n          return this.cConfigKitName();\n        } else {\n          return this.cConfigOutputMethod();\n        }\n      // case \"configDone\":\n      // \treturn this.cConfigOutputMethod();\n      default:\n        return (\n          <Box>\n            <Text>\n              Nothing found in <Color blue>renderConfig()</Color>\n            </Text>\n          </Box>\n        );\n    }\n  }\n  //TODO: Remove unnecessary this statements\n  render() {\n    const { phase } = this.state;\n    if (phase.includes(\"Boilerplate\") || phase == \"\") {\n      return this.renderIntro();\n    } else if (phase.includes(\"env\")) {\n      return this.renderEnv();\n    } else if (phase.includes(\"config\")) {\n      return this.renderConfig();\n    } else if (phase == \"end\") {\n      return this.cEnd();\n    }\n  }\n}\n\nexport function initInk() {\n  render(<LAFGenerator />);\n}\n","module.exports = require(\"react\");","module.exports = require(\"ink\");","module.exports = require(\"ink-text-input\");","module.exports = require(\"ink-select-input\");","module.exports = require(\"clipboardy\");","require(\"dotenv\").config();\nconst log = console.log;\nimport fs from \"fs-extra\";\nimport lingo from \"Lingojs\";\n\n// import config from \"./lingo.config\"; // For init tests\n// import { DateTime } from \"luxon\"; // For fs.outputFile\n\n/**\n * @param {int} spaceId :: Lingo Space ID (6 digits)\n * @param {int} apiToken :: Account root API\n */\nexport function getLingoSetupVariables(spaceId, apiToken) {\n  if (spaceId == null || apiToken == null) {\n    return [process.env.SPACE_ID, process.env.API_TOKEN];\n  } else {\n    return [spaceId, apiToken];\n  }\n}\n\n/**\n *\n * @param {string} kitName\n */\nexport async function getKitId(kitName = \"Capswan - Mobile App - Style Guide\") {\n  let kitUuid;\n  try {\n    let kits = await lingo.fetchKits();\n    kits.forEach(v => {\n      if (v.name === kitName) {\n        kitUuid = v.kit_uuid;\n      }\n    });\n    return kitUuid;\n  } catch (err) {\n    log(`getKitId() ${err}`);\n  }\n}\n\n/**\n * getRelevantAssetContainer\n * @param {*} kitId\n * @param {*} extractTarget\n * @param {*} kitVersion\n */\nexport async function getRelevantAssetContainer(\n  kitId,\n  extractTarget,\n  kitVersion = 0\n) {\n  //getRelevantAssetContainer\n  let outline = await lingo.fetchKitOutline(kitId, kitVersion);\n  const { sections } = extractTarget;\n  var assetContainer = Object.values(sections)\n    .map((extract, xIdx) => {\n      // log(`extract: ${JSON.stringify(extract, null, 2)}`);\n      return Object.values(outline)\n        .filter(origin => {\n          return origin.name === extract.name;\n        })\n        .map(matchingOrigin => {\n          const { uuid, headers } = matchingOrigin;\n          return Object.assign({}, { [uuid]: headers });\n        })\n        .map(slimmedOrigin => {\n          // log(`slimmedOrigin: ${JSON.stringify(slimmedOrigin, null, 2)}`);\n          let sectionUuid = Object.keys(slimmedOrigin);\n          if (extract.hasOwnProperty(\"headers\") && extract.headers.length > 0) {\n            return Object.values(extract.headers)\n              .map(extractHeaderName => {\n                // log(\n                // \t`extractHeaderName: ${JSON.stringify(\n                // \t\textractHeaderName,\n                // \t\tnull,\n                // \t\t2\n                // \t)}`\n                // );\n                return extractHeaderName;\n              })\n              .map(xHeader => {\n                let headers = Object.values(slimmedOrigin).flat();\n                // log(`headers: ${JSON.stringify(headers, null, 2)}`);\n                return headers.filter((oHeader, idx) => {\n                  // log(`oHeader: ${JSON.stringify(oHeader, null, 2)}`);\n                  const { name, uuid } = oHeader;\n                  // log(`nameee${idx}: ${name}`);\n                  // log(`uuuuid${idx}: ${uuid}`);\n                  // log(`xHeader${idx}: ${xHeader}`);\n                  // log(`insideeee headers`);\n                  if (name === xHeader) {\n                    // log(`insiiiiide nameXheader`);\n                    return Object.assign({}, { name, uuid });\n                  }\n                });\n              })\n              .map(matchedOriginHeaders => {\n                // log(\n                // \t`matchedOriginHeaders: ${JSON.stringify(\n                // \t\tmatchedOriginHeaders,\n                // \t\tnull,\n                // \t\t2\n                // \t)}`\n                // );\n                const { name, uuid } = matchedOriginHeaders[0];\n                // log(`name: ${name}`);\n                // log(`uuid: ${uuid}`);\n                return Object.assign({}, { [sectionUuid]: { name, uuid } });\n              })\n              .map(matchedUuidHeaderKV => {\n                // log(\n                // \t`matchedUuidHeaderKV: ${JSON.stringify(\n                // \t\tmatchedUuidHeaderKV,\n                // \t\tnull,\n                // \t\t2\n                // \t)}`\n                // );\n                return matchedUuidHeaderKV;\n              });\n          } else {\n            return Object.assign({}, { [sectionUuid]: {} });\n          }\n        })\n        .map(extracted => {\n          // log(`extracted: ${JSON.stringify(extracted, null, 2)}`);\n          return extracted;\n        });\n    })\n    .map(x => {\n      // log(`x: ${JSON.stringify(x, null, 2)}`);\n      return Object.values(x.flat());\n    });\n  return assetContainer.flat();\n}\n\n/**\n *\n * @param {string} assetName\n * @param {Array[string]} assetKeywords\n */\nfunction buildFileName(assetName, assetKeywords) {\n  //TODO: Make this extensible so people can pass their own options\n  if (assetKeywords.length >= 1) {\n    let tags = assetKeywords\n      .split(\",\")\n      .map(tag => {\n        return tag.trim();\n      })\n      .map(trimmed => {\n        return trimmed.replace(/ /g, \"_\");\n      });\n    let underscoredKeywords = tags.join(\"_\");\n    let underscoredAssetName = assetName.replace(/ /g, \"_\");\n    let newName = underscoredAssetName + \"_\" + underscoredKeywords;\n    return newName;\n  } else {\n    return assetName;\n  }\n}\n/**\n *\n * @param {array[{object:{string: {object}}}]} container\n * @param {integer} version\n * @param {integer} page\n * @param {integer} limit\n */\n\nexport async function getAssetUuids(\n  container,\n  version = 0,\n  page = 1,\n  limit = 2000\n) {\n  try {\n    var assetUuids = [];\n    for (let c of container) {\n      for (const [sectionUuid, header] of Object.entries(c)) {\n        let headerUuid = header.uuid;\n        if (headerUuid === null || headerUuid === undefined) {\n          // http://developer.lingoapp.com/lingojs/#sections\n          var section = await lingo.fetchSection(\n            sectionUuid,\n            version,\n            page,\n            limit\n          );\n          // fs.outputFileSync(\n          //   `./src/payloads/${DateTime.local().toISODate()}/section.json`,\n          //   JSON.stringify(section, null, 2)\n          // );\n          for (let item of section.items) {\n            // log(`item: ${item}`); // ?\n            if (item.asset_uuid !== null) {\n              if (item.asset.hasOwnProperty(\"keywords\")) {\n                var fileName = buildFileName(\n                  item.asset.name,\n                  item.asset.keywords\n                );\n              } else {\n                fileName = item.asset.name;\n              }\n              assetUuids.push(\n                Object.assign({}, { [item.asset_uuid]: fileName })\n              );\n              assetUuids;\n            }\n          }\n        } else {\n          // http://developer.lingoapp.com/lingojs/#heading-contents\n          var headerAssets = await lingo.fetchAssetsForHeading(\n            sectionUuid,\n            headerUuid\n          );\n          // fs.outputFileSync(\n          //   `./src/payloads/${DateTime.local().toISODate()}/headerAssets.json`,\n          //   JSON.stringify(headerAssets, null, 2)\n          // );\n\n          for (const [k, v] of Object.entries(headerAssets, null, 2)) {\n            if (v.asset_uuid !== null) {\n              // log(`v.asset.name: ${v.asset.name}`);\n              // log(`v.asset.keywords: ${v.asset.keywords}`);\n              if (v.asset.hasOwnProperty(\"keywords\")) {\n                var fileName = buildFileName(v.asset.name, v.asset.keywords);\n              } else {\n                fileName = v.asset.name;\n              }\n              // log(`header fileName: ${fileName}`);\n              assetUuids.push(Object.assign({}, { [v.asset_uuid]: fileName }));\n            }\n          }\n        }\n      }\n    }\n    return assetUuids;\n  } catch (err) {\n    log(`getAssetUuids() ${err}`);\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n/**\n *\n * @param {object} asset\n * @param {string} outFormat\n * @param {string} outDir\n */\nexport async function batchDownload(\n  asset,\n  outFormat = \"png\",\n  outDir = \"./downloads\"\n) {\n  try {\n    asset.forEach(async a => {\n      let uuid = Object.keys(a);\n      let fileName = Object.values(a);\n      var buffer;\n      try {\n        buffer = await lingo.downloadAsset(uuid, outFormat.toUpperCase());\n        fs.outputFileSync(\n          `${outDir}/${fileName}.${outFormat.toLowerCase()}`,\n          buffer,\n          \"binary\"\n        );\n      } catch (err) {\n        log(`Err: ${err}`);\n      }\n    });\n  } catch (err) {\n    log(`batchDownload(): ${err}`);\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////\n\n/**\n *\n * @param {string} kitName\n * @param {object} extractTarget\n * @param {string} outputDirectory\n * @param {string} outputFormat\n * @param {string} spaceId\n * @param {string} apiToken\n * @param {int} kitVersion\n */\nexport async function init(\n  kitName = \"Test Me\",\n  extractTarget = null,\n  outputDirectory = \"./downloads\",\n  outputFormat = \"PNG\",\n  spaceId = null,\n  apiToken = null,\n  kitVersion = 0\n) {\n  if (extractTarget == null) {\n    throw Error(\"Extract Target is required\");\n  }\n  let lsConfig = getLingoSetupVariables(spaceId, apiToken); //Allow overwriting of env variables from init function\n  lingo.setup(lsConfig[0], lsConfig[1]); //[0] => spaceId, [1] => apiToken\n  try {\n    await batchDownload(\n      await getAssetUuids(\n        await getRelevantAssetContainer(\n          await getKitId(kitName),\n          extractTarget,\n          kitVersion\n        )\n      ),\n      outputFormat,\n      outputDirectory\n    );\n    return true;\n  } catch (err) {\n    log(`init() ${err}`);\n    return false;\n  }\n}\n\n/////////////////////////////////////\n// * Capswan\n/////////////////////////////////////\n\n// init(\n// \t\"Capswan - Mobile App - Style Guide\",\n// \tconfig.capswan.targetOne,\n// \t\"./downloads/capswan/One\",\n// \t\"PNG\"\n// );\n// init(\n// \t\"Capswan - Mobile App - Style Guide\",\n// \tconfig.capswan.targetTwo,\n// \t\"./downloads/capswan/Two\",\n// \t\"png\"\n// );\n\n/////////////////////////////////////\n// * TestMe\n/////////////////////////////////////\n// ? The reason this was failing before was because \"Illustrated\" was capitalized in config, but \"illustrated\" was lowercase in Lingo\n// init(\"Test Me\", config.testMe.targetOne, \"./downloads/testMe/One\", \"PNG\");\n// init(\"Test Me\", config.testMe.targetTwo, \"./downloads/testMe/Two\", \"png\");\n","module.exports = require(\"Lingojs\");","module.exports = require(\"dotenv\");"],"sourceRoot":""}